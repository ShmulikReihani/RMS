package com.hit.algorithm;

import java.util.HashMap;
import java.util.LinkedHashMap;

public class SecondChance<K, V> extends AbstractAlgoCache<K, V> {
	
	class Node<K, V>{
		
		K key;
		V value;
		Integer bit;
		
		public Node( K key,V value) {
			super();
			this.key = key;
			this.value = value;
			this.bit = 0;
		}
	}
	
	HashMap<K , Node<K, V>> cache;
	
	public SecondChance(int capacity) {
		super(capacity);
		cache = new HashMap<K,Node<K, V>>(capacity);
		
	}

	@Override
	public V getElement(K key) {
		
		return null;
	}

	@Override
	public V putElement(K key, V value) {
		Node temp = new Node<K, V>(key, value);
		if(capacity<CacheSize)
		{
			if(cache.containsKey(key))
			{
				if(cache.get(key).bit==0)
					cache.get(key).bit++;
			}
			cache.put(key, value)
		}
			
		return null;
	}

	@Override
	public void removeElement(K key) {
		
		
	}

}
