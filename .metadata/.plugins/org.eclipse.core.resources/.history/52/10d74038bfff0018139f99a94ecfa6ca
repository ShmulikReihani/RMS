package com.hit.algorithm;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;

public class SecondChance<K, V> extends AbstractAlgoCache<K, V> {
	
	class Node<K, V>{
		
		K key;
		V value;
		Integer bit;
		
		public Node( K key,V value) {
			super();
			this.key = key;
			this.value = value;
			this.bit = 0;
		}
	}
	
	HashMap<K , V> cache;
	LinkedList< Node<K, V> > array;
	
	public SecondChance(int capacity) {
		super(capacity);
		cache = new HashMap<K,V>(capacity);
		array = new LinkedList<>();
	}

	@Override
	public V getElement(K key) {
		if( cache.containsKey(key)){
			K temp= (K) array.get(list.indexOf(key));
			return map.get(temp);
		}
		else
			return null;	
		
	}

	@Override
	public V putElement(K key, V value) {
		Node temp = new Node<K, V>(key, value);
		if(capacity<CacheSize)
		{
			if(cache.containsValue(value))
			{
				
				if(array.get((int)value).bit==0)
					array.get((int)value).bit++;
			}
			cache.put(key, value);
			array.add(temp);
			capacity++;
		}
		else {
			if(cache.containsValue(value))
			{
				if(array.get((int)value).bit==0)
					array.get((int)value).bit++;
				
			}
			else 
			{
				boolean found = true;
				int i=0;
				while(found)
				{
					Node t = array.get(i);
					if(t.bit == 0)
					{
						cache.remove(i);
						array.remove(i);
						cache.put(key, value);
						array.add(temp);
						found = false;
					}
					i++;
				}
			}
			
		}
		return value;
	}
	
	public void printCache() {
		for(int i=0; i< array.size(); i++)
		{
			System.out.println("+++ value: "+array.get(i).value+" bit: "+array.get(i).bit+" +++");
		}
	}

	
	public void seeIfHere(K key, V value)
	{
		
		
		
		if(cache.containsValue(value)) {
		
			System.out.println("here! = key: "+ array.get(list.indexOf(key)).key +" value: "+ array.get(list.indexOf(key)).value + " bit: " + array.get(list.indexOf(key)).bit);
		}
		else
			System.out.println("not here!");
	}
	
	@Override
	public void removeElement(K key) {
		
		
	}

}
