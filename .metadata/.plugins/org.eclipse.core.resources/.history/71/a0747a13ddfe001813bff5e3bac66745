package com.hit.algorithm;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;

public class SecondChance<K, V> extends AbstractAlgoCache<K, V> {
	
	class Node<K, V>{
		
		K key;
		V value;
		Integer bit;
		
		public Node( K key,V value) {
			super();
			this.key = key;
			this.value = value;
			this.bit = 0;
		}
	}
	
	HashMap<K , Node<K, V>> cache;
	LinkedList<Node<K, V>> array;
	
	public SecondChance(int capacity) {
		super(capacity);
		cache = new HashMap<K,Node<K, V>>(capacity);
		array = new LinkedList<>();
	}

	@Override
	public V getElement(K key) {
		if( cache.containsKey(key)){
			K temp= (K) array.get(list.indexOf(key));
			return map.get(temp);
		}
		else
			return null;	
		
	}

	@Override
	public V putElement(K key, V value) {
		Node temp = new Node<K, V>(key, value);
		if(capacity<CacheSize)
		{
			if(cache.containsKey(key))
			{
				if(cache.get(key).bit==0)
					cache.get(key).bit++;
			}
			cache.put(key, temp);
			array.add(temp);
			return value;
		}
		else {
			if(cache.containsKey(key))
				if(cache.get(key).bit==0)
					cache.get(key).bit++;
			boolean found = true;
			int i=0;
			while(found)
			{
				Node t = array.get(i);
				if(t.bit != 0)
				{
					cache.put((K) t.key, t);
					array.remove(i);
					array.add(t);
					found = false;
				}
				i++;
			}
		}
		return value;
	}

	@Override
	public void removeElement(K key) {
		
		
	}

}
