package com.hit.algorithm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;

public class SecondChance<K, V> extends AbstractAlgoCache<K, V> {
	
	class Node<K, V>{
		
		K key;
		V value;
		Integer bit;
		
		public Node( K key,V value) {
			super();
			this.key = key;
			this.value = value;
			this.bit = 0;
		}
	}
	
	HashMap< K , V > cache;
	LinkedList< Node<K, V> > array;
	
	ArrayList<Node<K,V>> lastUsedList;
	HashMap<V, Node<K,V>> last;
	
	
	public SecondChance(int capacity) {
		super(capacity);
		cache = new HashMap<K,V>(capacity);
		array = new LinkedList<>();
		lastUsedList = new ArrayList<Node<K,V>>();
		
		last = new HashMap<V, Node<K,V>>();
	}

	@Override
	public V getElement(K key) {
		if( cache.containsKey(key)){
			K temp= (K) array.get(list.indexOf(key));
			return map.get(temp);
		}
		else
			return null;	
		
	}

	@Override
	public V putElement(K key, V value) {
		Node temp = new Node<K, V>(key, value);
		int index = seeIfHere(key, value);
		if(capacity<CacheSize)
		{
	
			
			if(index != -1)
			{ 
				if(lastUsedList.get(index).bit==0)
					lastUsedList.get(index).bit++;
			}
			else {
				cache.put(key, value);
				//last.put(value, temp);
				lastUsedList.add(temp);
				capacity++;
			}
			
		}
		else {
			if(index != -1)
			{
				if(lastUsedList.get(index).bit==0)
					lastUsedList.get(index).bit++;
			}
			else 
			{
				
				/*last.forEach( (k,node) -> {
					
						if(node.bit == 0)
						{
							cache.remove(value);
							last.remove(value);
							cache.put(key, value);
							last.put(value, temp);
							return;
						}
				});*/
				
				
						
				for(int i=0; i<cache.size(); i++)
				{
					if(lastUsedList.get(i).value == value)
						if(last.get(i).bit == 0)
						{
							cache.remove(i);
							last.remove(value);
							cache.put(key, value);
							last.put(value, temp);
							return value;
						}	
				}
				
				/*boolean found = true;
				int i=0;
				while(found)
				{
					Node t = array.get(i);
					if(t.bit == 0)
					{
						cache.remove(i);
						array.remove(i);
						cache.put(key, value);
						array.add(temp);
						found = false;
					}
					i++;
				}*/
			}
			
		}
		return value;
	}
	
	public void printCache() {
		
		/*last.forEach( (key,node) -> {
			System.out.println("key: "+ key +" value: "+ node.value + " bit: " + node.bit);
		});*/
		lastUsedList.forEach(node ->{
			System.out.println("key: "+ node.key +" value: "+ node.value + " bit: " + node.bit);
		});
		
	}

	
	public int seeIfHere(K key, V value)
	{
		for(int i=0; i< lastUsedList.size(); i++)
			if(lastUsedList.get(i).value == value)
				return i;
		return -1;
	}
	
	@Override
	public void removeElement(K key) {
		
		
	}

}
